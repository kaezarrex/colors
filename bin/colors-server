#!/usr/bin/env python

import argparse
import logging
import json
from os.path import abspath
import sys

from verify import StringField, ValidationError, Validator

class ConfigValidator(Validator):
    static_folder     = StringField()
    static_url_path   = StringField(required=False)
    template_folder   = StringField()

parser = argparse.ArgumentParser()

parser.add_argument('--config', type=argparse.FileType('r'))
parser.add_argument('--host', default='0.0.0.0')
parser.add_argument('--debug', default=False, action='store_true')
parser.add_argument('--port', type=int, default=8000)

parser.add_argument('--static-folder')
parser.add_argument('--static-url-path')
parser.add_argument('--table-data-folder')
parser.add_argument('--template-folder')

args = parser.parse_args()

if args.debug:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

# First load the config from a file
if args.config is not None:
    config = json.load(args.config)
else:
    config = dict()

# Override the config with cmd line parameters
if args.static_folder:
    config['static_folder'] = args.static_folder

if args.static_url_path:
    config['static_url_path'] = args.static_url_path

if args.template_folder:
    config['template_folder'] = args.template_folder

# Validate the config - verify that all required values are supplied and there
# are no erroneous values
try:
    config = ConfigValidator.process(config)
except ValidationError as ve:
    logging.exception(ve)
    sys.exit(1)

from colors.web import build_app

build_app(**config).run(
    debug=args.debug, 
    host=args.host,
    port=args.port
)
